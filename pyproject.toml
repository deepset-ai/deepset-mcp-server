[project]
name = "deepset-mcp"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi",
    "mcp",
    "httpx",
    "pydantic>=2.0.0",
    "pyyaml",
    "numpy",
    "model2vec",
]

[project.scripts]
deepset-mcp = "deepset_mcp.main:main"
mcp-benchmark = "deepset_mcp.benchmark.runner.cli:cli"

[project.optional-dependencies]
analysis = [
    "jupyterlab",
    "pandas",
    "matplotlib",
    "seaborn"
]
benchmark = [
    "typer",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/deepset_mcp"]

[dependency-groups]
dev = [
    "pytest",
    "pytest-asyncio",
    "python-dotenv",
]
lint = [
    "ruff",
]

types = [
    "mypy",
    "types-PyYAML",
    "pandas-stubs",
]

[tool.pytest.ini_options]
testpaths = ["test"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

markers = [
    "integration: marks tests that interact with external resources (e.g. deepset API).",
    "extra_slow: marks tests that take a long time to run (e.g. pipeline deployment)."
]

[tool.ruff]
line-length = 120
target-version = "py311"
include = ["pyproject.toml", "src/**/*.py", "test/**/*.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # docstrings
]
ignore = [
    "D100", # Ok to not have docstring for public modules
    "D104", # Ok to not have docstring for public package
    "D401", # First line of docstring in imperative mode
]
isort = { combine-as-imports = true, known-first-party = ["deepset_mcp"] }

[tool.ruff.lint.per-file-ignores]
"test/*" = ["D"]
"src/deepset_mcp/benchmark/runner/cli.py" = ["B904"] # Allow to raise Typer errors without attaching full stack trace.

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.mypy]
strict = true



